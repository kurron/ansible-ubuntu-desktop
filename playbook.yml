#!/usr/bin/env ansible-playbook

- name: Gather prerequisites 
  hosts: all
  gather_facts: True
  tasks:
    - name: create groups based on distribution
      group_by: key={{ ansible_distribution }}

- name: Add entries for local machines
  hosts: Ubuntu
  become: True
  tasks:
    - lineinfile: dest=/etc/hosts line="192.168.1.222 batcave"
    - lineinfile: dest=/etc/hosts line="192.168.1.227 stargate"
    - lineinfile: dest=/etc/hosts line="192.168.1.229 atlantis"
    - lineinfile: dest=/etc/hosts line="192.168.1.233 docker"
    - lineinfile: dest=/etc/hosts line="192.168.1.234 nas"
    - lineinfile: dest=/etc/hosts line="192.168.1.235 pi"
    - lineinfile: dest=/etc/hosts line="192.168.1.236 pi2"
    - lineinfile: dest=/etc/hosts line="192.168.1.250 freenas"

- name: Install Vagrant
  hosts: Ubuntu
  become: True
  vars:
    vagrant_version: 1.8.1
  tasks:
    - name: Download Vagrant package
      get_url: url=https://releases.hashicorp.com/vagrant/{{ vagrant_version }}/vagrant_{{ vagrant_version }}_x86_64.deb dest=/root/vagrant.deb mode=0440
    - name: Install Vagrant package
      apt: deb=/root/vagrant.deb
    - name: Test Vagrant 
      command: /usr/bin/vagrant --version 

- name: Install Packer
  hosts: Ubuntu
  become: True
  vars:
    packer_version: 0.9.0
  tasks:
    - name: Download And Install Packer
      unarchive: src=https://releases.hashicorp.com/packer/{{ packer_version }}/packer_{{ packer_version }}_linux_amd64.zip dest=/usr/bin mode=0555 copy=no
#   - name: Test Packer
#     command: /usr/bin/packer --version

- name: Install Otto
  hosts: Ubuntu
  become: True
  vars:
    otto_version: 0.2.0
  tasks:
    - name: Download And Install Otto
      unarchive: src=https://releases.hashicorp.com/otto/{{ otto_version }}/otto_{{ otto_version }}_linux_amd64.zip dest=/usr/bin mode=0555 copy=no
    - name: Test Otto
      command: /usr/bin/otto --version

- name: Install VirtualBox 
  hosts: Ubuntu
  become: True
  tasks:
    - name: Add VirtualBox repository key
      apt_key: url=https://www.virtualbox.org/download/oracle_vbox.asc state=present
    - name: Add VirtualBox repository
      apt_repository: repo='deb http://download.virtualbox.org/virtualbox/debian {{ ansible_lsb.codename }} contrib' state=present
    - name: Install VirtualBox 
      apt: name=virtualbox-5.0 state=present update_cache=yes

- name: Install Docker
  hosts: Ubuntu
  become: True
  vars_prompt:
    - name: "userAccount"
      prompt: "The account to add to the docker group."
      private: no
      default: "rkurr"
  vars:
    composeVersion: 1.6.2

  tasks:
    - debug: msg="userAccount = {{ userAccount }}"
    - debug: msg="composeVersion = {{ composeVersion }}"
    - name: Install cURL
      apt: name=curl state=latest update_cache=true cache_valid_time=600
    - name: Download Docker Installation Script
      command: /usr/bin/curl --location --output /root/install-docker https://get.docker.com/
    - name: Set Permission Bits On The Docker Installation Script
      file: path=/root/install-docker owner=root group=root mode=0500 
    - name: Execute Docker Installation Script
      shell: /root/install-docker 
#   - name: Set Memory and Swap Accounting
#     lineinfile: dest=/etc/default/grub regexp='^GRUB_CMDLINE_LINUX=""' line='GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"'
    - name: Add account to the docker group 
#     user: name={{ userAccount }} groups=docker 
      command: usermod -aG docker {{ userAccount }}
    - name: Restart Docker
      command: service docker restart
    - name: Test Docker
      command: docker run hello-world
    - name: Download Docker Compose Script
      shell: /usr/bin/curl --location --output /usr/local/bin/docker-compose https://github.com/docker/compose/releases/download/{{ composeVersion }}/docker-compose-`uname -s`-`uname -m`
    - name: Set Permission Bits On The Docker Compose Script
      file: path=/usr/local/bin/docker-compose owner=root group=root mode=0555
    - name: Echo Docker Compose version
      command: docker-compose --version

- name: Tweak User Account
  hosts: Ubuntu
  become: False
  tasks:
    - name: set editor to VI
      lineinfile: dest={{ ansible_env.HOME }}/.bashrc line='set -o vi'
    - name: Copy Git configuration file
      copy: src=files/.gitconfig dest={{ ansible_env.HOME }}/.gitconfig mode=644 backup=no

- name: Install Git
  hosts: Ubuntu
  become: True
  tasks:
    - name: Install Git
      apt: name=git state=latest update_cache=true cache_valid_time=600

- name: Install Git Projects
  hosts: Ubuntu
  become: False
  tasks:
    - name: Make GitHub Directory
      file: path={{ ansible_env.HOME }}/GitHub state=directory mode=0755
    - git: repo=https://github.com/kurron/jvm-development-environment.git dest={{ ansible_env.HOME }}/GitHub/jvm-development-environment
    - git: repo=https://github.com/kurron/ansible-pull-development.git dest={{ ansible_env.HOME }}/GitHub/ansible-pull-development
    - git: repo=https://github.com/kurron/ansible-pull-docker.git dest={{ ansible_env.HOME }}/GitHub/ansible-pull-docker
    - git: repo=https://github.com/kurron/ansible-pull-operations.git dest={{ ansible_env.HOME }}/GitHub/ansible-pull-operations
    - git: repo=https://github.com/kurron/ansible-pull-transparent.git dest={{ ansible_env.HOME }}/GitHub/ansible-pull-transparent
    - git: repo=https://github.com/kurron/ansible-pull-desktop-tweaks.git dest={{ ansible_env.HOME }}/GitHub/ansible-pull-desktop-tweaks
    - git: repo=https://github.com/kurron/ansible-pull-server-tweaks.git dest={{ ansible_env.HOME }}/GitHub/ansible-pull-server-tweaks
    - git: repo=https://github.com/kurron/scripts.git dest={{ ansible_env.HOME }}/GitHub/scripts
    - git: repo=https://github.com/kurron/docker-oracle-jdk-8.git dest={{ ansible_env.HOME }}/GitHub/docker-oracle-jdk-8
    - git: repo=https://github.com/kurron/sequence-diagrams.git dest={{ ansible_env.HOME }}/GitHub/sequence-diagrams
    - git: repo=https://github.com/awslabs/git-secrets.git dest={{ ansible_env.HOME }}/GitHub/git-secrets
    - git: repo=https://github.com/hashicorp/otto-getting-started.git dest={{ ansible_env.HOME }}/GitHub/otto-getting-started

- name: Install Newrelic
# hosts: Ubuntu
  hosts: nobody
  become: True
  vars_prompt:
    - name: "apiKey"
      prompt: "The Newrelic API key to use."
      private: no
      default: "9a3465dc990aa65ee1037041a7d0f770ef428cfd"
  tasks:
    - name: Add newrelic repository
      apt_repository: repo='deb http://apt.newrelic.com/debian/ newrelic non-free' state=present
    - name: Add newrelic keyfile
      apt_key: url=https://download.newrelic.com/548C16BF.gpg state=present
    - name: Add newrelic agent
      apt: name=newrelic-sysmond state=present update_cache=yes
    - name: Add license key to the configuration
      command: nrsysmond-config --set license_key={{ apiKey }}
    - name: Add newrelic account to the docker group so it can monitor containers
      user: name=newrelic groups=docker
    - name: Restart the agent
      service: name=newrelic-sysmond state=restarted

- name: Configure Rsyslog To Forward to Loggly
# hosts: Ubuntu
  hosts: nobody
  become: True
  vars_prompt:
    - name: "logglyKey"
      prompt: "The Loggly API key to use."
      private: no
      default: "91ec9498-62c1-42fc-b9e9-a977628cb17d"
    - name: "logglyTag"
      prompt: "The Loggly Tag to use."
      private: no
      default: "monitor-experiment"
  tasks:
    - debug: msg="logglyKey = {{ logglyKey }}"
    - debug: msg="logglyPath = {{ logglyTag }}"
    - name: Copy Rsyslog Configuration File 
      template: src=templates/loggly.conf dest=/etc/rsyslog.d/22-loggly.conf mode=0444 backup=yes force=yes
    - name: Restart the Rsyslog
      command: /usr/sbin/service rsyslog restart
    - name: Send a test message 
      command: logger 'Hello From Ansible!'

- name: Install Sysdig
  hosts: Ubuntu
  become: True
  tasks:
      - name: Download the signing key
        apt_key: url=https://s3.amazonaws.com/download.draios.com/DRAIOS-GPG-KEY.public state=present
      - name: Add the Apt repository
        apt_repository: repo='deb http://download.draios.com/stable/deb stable-$(ARCH)/' state=present
      - name: Install Headers
        shell: apt-get -y install linux-headers-$(uname -r)
      - name: Install Sysdig
        apt: name=sysdig state=latest update_cache=true

- name: Install Tools I Like
  hosts: Ubuntu
  become: True
  tasks:
      - apt: name=tree state=latest
      - apt: name=tmux state=latest
      - apt: name=sysstat state=latest
      - apt: name=iotop state=latest
      - apt: name=iftop state=latest
      - apt: name=wireshark state=latest
      - apt: name=chromium-browser state=latest
      - apt: name=filezilla state=latest
      - apt: name=grsync state=latest

- name: Mount NAS Drive
  hosts: Ubuntu
  become: True
  tasks:
      - name: Install NFS client
        apt: name=nfs-common state=latest update_cache=true cache_valid_time=600
      - name: Create the NAS mount point
        file: path=/mnt/nas state=directory
      - name: Mount NAS drive
        mount: fstype=nfs name=/mnt/nas src=nas:/media state=mounted opts=ro

